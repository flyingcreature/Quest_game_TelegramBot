import telebot
from telebot import apihelper
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
from info import location_data
import json
from dotenv import load_dotenv
from os import getenv

load_dotenv()
token = getenv("BOT_TOKEN")

bot = telebot.TeleBot(token)


def load_data() -> dict:
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ json."""
    try:
        with open("data.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.decoder.JSONDecodeError):
        return {}


def save_data(data: dict):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ json."""
    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, indent=2, ensure_ascii=False)


user_data = load_data()


def create_markup(answers: list):
    """–§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    markup = ReplyKeyboardMarkup()

    for answer in answers:
        markup.add(answer)

    return markup


@bot.message_handler(commands=['start'])
def send_welcome(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start."""
    markup = ReplyKeyboardMarkup()

    user_id = message.from_user.id

    if str(user_id) not in user_data:
        markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ üéÆ"))

        text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username} üëã. –°–∫–æ—Ä–µ–µ –ø—Ä–æ–π–¥–∏ —ç—Ç—É –∏–≥—Ä—É!"

        user_data[str(user_id)] = {
            "–ò–º—è": message.from_user.username,
            "location": "start",
            "scale": 0,
        }
        save_data(user_data)

    elif str(user_id) in user_data and user_data[str(user_id)]["location"] != "start":
        markup.add(KeyboardButton("üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà"), KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ü´†"))

        text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username} üëã! –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞?"

    else:
        markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ üéÆ"))

        text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username} üëã! –°–∫–æ—Ä–µ–µ –ø—Ä–æ–π–¥–∏ —ç—Ç—É –∏–≥—Ä—É."

    bot.send_message(
        chat_id=user_id,
        text=text.format(message.from_user.username),
        reply_markup=markup,
    )


def send_photo(user_id, image_path):
    try:
        with open(image_path, 'rb') as img:
            bot.send_photo(
                chat_id=user_id,
                photo=img
            )
    except TypeError:
        pass

@bot.message_handler(commands=["help"])
def send_help(message: Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç üôã‚Äç‚ôÇÔ∏è, –µ—Å–ª–∏ —Ç—ã —Ç—É—Ç –∑–Ω–∞—á–∏—Ç —Ç–µ–±—è –ø–æ–Ω–∞–¥–æ–±–∏–ª–∞—Å—å –ø–æ–º–æ—â—å. \n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ /game_rules üìù. \n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–æ—Ä–∞—é—Å—å –µ—ë —É—Å—Ç—Ä–∞–Ω–∏—Ç—å. \n\n"
        "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ README —Ñ–∞–π–ª–µ –Ω–∞ (https://github.com/flyingcreature/Quest_game_TelegramBot)"
    )

    markup = ReplyKeyboardMarkup()
    markup.add("üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà")

    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=markup
    )


@bot.message_handler(commands=["game_rules"])
def send_game_rules(message: Message):
    text = (
        "–í—ã –±—É–¥–∏—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ —Å—é–∂–µ—Ç—É, –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. "
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∂–∏—Ç—å 1 –¥–µ–Ω—å –∂–∏–∑–Ω—å—é –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üé≠.\n"
        "–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–≥—Ä—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ü–æ–≤–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.\n\n"
        "–ß—Ç–æ –±—ã –±–æ—Ç –ø–æ–Ω–∏–º–∞–ª –≤–∞—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã(–∫–Ω–æ–ø–∫–∏) üí¨,\n"
        "—Ç–∞–∫ –∂–µ —Å –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–æ —è –≤—Å–µ –∂–µ —Å–æ–≤–µ—Ç—É—é –∫–æ–º–∞–Ω–¥—ã(–∫–Ω–æ–ø–∫–∏).\n\n"
        "–†–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤–µ–¥—É—Ç –∫ —Ä–∞–∑–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é —Å—é–∂–µ—Ç–∞.\n\n"
        "üü• C—É—â–µ—Å—Ç–≤—É—é—Ç —Ç—É–ø–∏–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –≤—ã–±—Ä–∞–≤ –µ–≥–æ –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ.\n\n"
        "üü© –í–µ—Ä–Ω—ã–µ - –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n\n"
        "üü® –ê —Ç–∞–∫ –∂–µ –ø—Ä–æ—Ö–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ï—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∞–∫–æ–π, –≤–∞–º –¥–∞–¥—É—Ç –Ω–∞ –≤—ã–±–æ—Ä –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤,"
        " —á—Ç–æ –±—ã –≤—ã —Ä–µ—à–∏–ª–∏, –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å."
    )
    markup = ReplyKeyboardMarkup()
    markup.add("üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà")

    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=markup
    )


def filter_continues(message: Message):
    """–§—É–Ω–∫—Ü–∏—è-—Ñ–∏–ª—å—Ç—Ä, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º location –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keywords = ["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ üéÆ"]
    return message.text in keywords


@bot.message_handler(func=filter_continues)
def continue_solution(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞."""
    user_id = message.from_user.id
    go_to_location(user_id)


def filter_restart(message: Message):
    """–§—É–Ω–∫—Ü–∏—è-—Ñ–∏–ª—å—Ç—Ä, –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –æ–±–Ω—É–ª–µ–Ω–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º progress –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ü´†" == message.text


@bot.message_handler(func=filter_restart)
def restart_solution(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –∫–≤–µ—Å—Ç–∞."""
    user_id = message.from_user.id
    user_data[str(user_id)]["location"] = "start"
    user_data[str(user_id)]["scale"] = 0
    save_data(user_data)

    go_to_location(user_id)


def go_to_location(user_id):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞."""
    location = user_data[str(user_id)]["location"]
    text, dop_mes, choices, scale, image_path = location_data[location].values()
    path = location_data[location]["image"]

    markup = create_markup(choices)

    send_photo(user_id, path)

    bot.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=markup
    )
    bot.send_message(
        chat_id=user_id,
        text=dop_mes,
        reply_markup=markup
    )


def end_game(user_id):
    markup = ReplyKeyboardMarkup()
    markup.add("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ü´†")

    location = user_data[str(user_id)]["location"]
    text = location_data[location]["message"]
    user_data[str(user_id)]["location"] = "start"
    user_data[str(user_id)]["scale"] = 0
    save_data(user_data)

    path = location_data[location]["image"]

    send_photo(user_id, path)

    bot.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=markup
    )


def ending(user_id):
    if user_data[str(user_id)]["scale"] < 19:
        text = location_data["–ü–ª–æ—Ö–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞"]["message"]
        path = location_data["–ü–ª–æ—Ö–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞"]["image"]
    else:
        text = location_data["–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞"]["message"]
        path = location_data["–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞"]["image"]

    markup = ReplyKeyboardMarkup()
    markup.add("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ü´†")

    send_photo(user_id, path)

    bot.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=markup
    )

    end_game(user_id)


@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.chat.id

    if str(user_id) not in user_data:
        return send_welcome(message)

    location = user_data[str(user_id)]["location"]
    choices = location_data[location]["choices"]
    user_choice = message.text

    if user_choice not in choices:
        bot.send_message(
            user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üëâ."
        )
        return

    user_data[str(user_id)]["location"] = user_choice
    scale = location_data[user_choice]["scale"]
    user_data[str(user_id)]["scale"] += scale
    save_data(user_data)
    try:
        if user_data[str(user_id)]["location"] not in ["üí•–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ãüí•"]:
            if scale != 0:
                go_to_location(user_id)
            else:
                end_game(user_id)
        else:
            ending(user_id)
    except apihelper.ApiTelegramException:
        pass


bot.polling(none_stop=True)
